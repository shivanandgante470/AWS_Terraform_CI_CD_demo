name: "Terraform"

on:
  push:
    branches:
      - main
      - feature

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ROOT_PATH: '${{ github.workspace }}/terraform/dev_environment'
  ENV_PATH: '${{ github.workspace }}/terraform/dev_environment/environments/dev.tfvars'


jobs:
  terraform_plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Plan
        run: terraform plan -var-file "${{env.ENV_PATH}}
        working-directory: ${{env.ROOT_PATH}}

  manual_approval_apply:
    name: 'Manual Approval Apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: dev

    steps:
      - name: Manual Approval
        id: manual_approval
        run: echo "Approve or reject the deployment. Provide feedback in the GitHub Actions UI."

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [manual_approval_apply] # Dependency OR depends_on
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}


    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan
    #   working-directory: ${{env.ROOT_PATH}}

    # Actual Provisioning will be create
    - name: Terraform Apply
      run: terraform apply --auto-approve -var-file "${{env.ENV_PATH}}
      working-directory: ${{env.ROOT_PATH}}


  manual_approval_destroy:
    name: 'Manual Approval Destroy'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: destroy

    steps:
      - name: Manual Approval
        id: manual_approval
        run: echo "Approve or reject the deployment. Provide feedback in the GitHub Actions UI."

  terraform_destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: [manual_approval_destroy]
    environment: destroy
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Destroy
        run: terraform destroy --auto-approve -var-file "${{env.ENV_PATH}}
        working-directory: ${{env.ROOT_PATH}}