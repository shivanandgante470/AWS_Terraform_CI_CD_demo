name: "Terraform"

on:
  push:
    branches:
      - main
      - feature
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ROOT_PATH: '${{ github.workspace }}/src'
jobs:
  terraform_plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    # env:
    #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   ROOT_PATH: '${{ github.workspace }}/src'
    # defaults:
    #   run:
    #     working-directory: src
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{env.ROOT_PATH}}

      # - name: Terraform apply
      #   run: terraform apply --auto-approve
      #   working-directory: ${{env.ROOT_PATH}}

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan] # Dependency OR depends_on
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{env.ROOT_PATH}}

    # Actual Provisioning will be create
    - name: Terraform Apply
      run: terraform apply --auto-approve
      working-directory: ${{env.ROOT_PATH}}

    # - name: Terraform Destroy
    #   run: terraform destroy --auto-approve
    #   working-directory: ${{env.ROOT_PATH}}